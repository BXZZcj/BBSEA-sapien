You are a robot with a single arm in a tabletop robot manipulation environment.
Given a task description and two photographs of the tabletop scene (one from a top-down view and one from a front-facing view), the goal is to decompose the task into subtasks and call corresponding primitive actions, which, when performed in sequence, would solve the input task. The objects, their states, positions, and bounding boxes must be inferred from these photographs. The positive direction of the x-axis represents the front, and the negative direction represents the rear. The positive direction of the y-axis represents the right side, and the negative direction represents the left side. The positive direction of the z-axis represents upward, and the negative direction represents downward. One type of object may have multiple instances, but you should assume that you don't know the numerical labels corresponding to the instances and only know the quantity of instances.

You should consider the primitive actions the robot arm could take:
Pick(obj_name), PlaceOn(obj_name), PlaceAt(place_pos), Push(obj_name, direction, distance), DrawerOpen(handle_name, target_open_degree), DrawerClose(handle_name, target_open_degree), Press(obj_name, direction, distance), and decompose a task into feasible subtasks.
Here I will show you the implementation of the primitive actions for your reference:
Pick(obj_name): Approach the object, close the gripper to grasp it and lift it up (Parameters: obj_name -- the name of the object which would be picked). 
PlaceOn(obj_name): Move the gripper on top of the object with another object in the gripper and then open the gripper (Parameters: obj_name -- the name of the object which an object in the gripper would be placed on). 
PlaceAt(place_pos): Move the gripper to the target position with an object in the gripper and then open the gripper (Parameters: place_pos -- the target position which an object in the gripper would be moved to). 
Push(obj_name, direction, distance): Close the gripper and then push the object in the specified direction by a specified distance (Parameters: obj_name -- the name of the object which would be pushed; direction -- the direction which the object would be moved in. It is a direction vector [x, y, z]. If you only pass in [x, y], then z will be defaulted to 0; distance -- the distance which the object would be moved by, the distance is in the unit of meter). 
DrawerOpen(handle_name, target_open_degree): Open the drawer with a prismatic joint (Parameters: obj_name -- the name of the handle of the drawer with a prismatic joint; target_open_degree -- the desired final open degree of the drawer, it should be within [0, 1]). 
DrawerClose(handle_name, target_open_degree): Close the drawer with a prismatic joint (Parameters: obj_name -- the name of the handle of the drawer with a prismatic joint; target_open_degree -- the desired final open degree of the drawer, it should be within [0, 1]). 
Press(obj_name, direction, distance): Close the gripper and then press the object with the gripper tips (Parameters: obj_name -- the name of the object which should be pressed; direction -- the direction which the object should be pressed towards. It is a direction vector [x, y, z]. If you do not pass in anything, then it will be defaulted to [0,0,-1]; distance -- the distance which the object would be pressed by, the distance is in the unit of meter. If you do not pass in anything, the it will be defaulted to 0.015).
Below are some examples:
```
task description: move the red block onto the plate, the blue block onto the red block, and the green block on the blue block
Given photographs:
 [Top-down view]
 [Front-facing view]
reasoning: Objects should be stacked from bottom to top. Firstly, move the red block onto the plate. Secondly, move the blue block onto the red block. Thirdly, move the green block onto the blue block. "move onto" can be done via Pick and PlaceOn.
answer:
 - 1. move the red block onto the plate | [Pick('red block'); PlaceOn('plate)]
 - 2. move the blue block onto the red block | [Pick('blue block'); PlaceOn('red block')]
 - 3. move the green block onto the blue block | [Pick('green block'); PlaceOn('blue block')]
```
```
task description: move the red block in the drawer 
Given photographs:
 [Top-down view]
 [Front-facing view]
reasoning: the drawer starts off closed. It needs to be opened before objects can be moved into it. After the task is done, it needs to be closed. So firstly, open the drawer. Secondly, move the red block into the table. Thirdly, close the drawer. 
answer:
 - 1. open the drawer | [PrismaticJointOpen('drawer handle')]
 - 2. move the red block into the table | [Pick('red block'); PlaceOn('drawer')]
 - 3. close the drawer | [PrismaticJointClose('drawer handle')]
```
```
task description: move the bowl into the microwave
Given photographs:
 [Top-down view]
 [Front-facing view]
reasoning: The microwave starts off closed. It needs to be opened before objects can be put in them. After the task is done, it needs to be closed. Microwaves should be opened by pressing a button. So firstly, open the door of the microwave. Secondly, move the bowl into the microwave. Thirdly, close the door of the microwave.
answer:
 - 1. open the door of the microwave | [Press('microwave button')]
 - 2. move the bowl into the microwave | [Pick('bowl'); PlaceOn('microwave')]
 - 3. close the door of the microwave | [RevoluteJointClose('microwave handle')]
```

Now, I'd like you to help me decompose the following task into subtasks and call corresponding primitive actions. You should read the task description and carefully observe the two photographs I provide you. Think step by step, and imagine the process to accomplish the task with the primitive actions provided to you: Pick(obj_name), PlaceOn(obj_name), PlaceAt(place_pos), Push(obj_name, direction, distance), DrawerOpen(handle_name, target_open_degree), DrawerClose(handle_name, target_open_degree), Press(obj_name, direction, distance). Note that the second and third parameters of Push are lists of floats and a float respectively; do not use expressions composed of variables.
Note: Please make the format of your answer completely the same as the examples above, using | to split the subtask and primitive action.
```
task description:
{}
Given photographs:
reasoning: