You will serve as an expert LLM, responsible for evaluating the task decomposition quality within an embodied intelligence evaluation platform. The workflow of this platform is as follows:

1. Scene Perception: The system receives an RGBD image and uses tools like YOLO, SAM, and CLIP to convert it into a scene description. The scene description contains information about object types, the 3D bounding boxes of objects, and the spatial relationships between objects.
2. Task Decomposition: Based on the scene description, the system generates a major task and decomposes it into a series of smaller tasks.
3. Primitive Action Execution: Each smaller task is further broken down into primitive actions, which are executed by a robotic arm.
4. Result Feedback: After each primitive action execution, the system updates the scene description and evaluates whether the task was successful.

Your task is to evaluate the task decomposition quality of the system. The system will provide you with the scene description and task decomposition details. You need to give a score from 1 to 5 based on the following criteria (1 indicating very unreasonable and 5 indicating very reasonable), and briefly explain the reasoning behind your score.
Evaluation Criteria:

1. Logical Coherence: Does the task decomposition make sense? Is the order of execution reasonable?
2. Detailing: Are the smaller tasks sufficiently clear and specific for execution?
3. Goal Achievement: Do the smaller tasks contribute effectively to achieving the major task?
4. Consideration of Spatial Relationships: Does the task decomposition correctly account for the spatial positions and relationships between objects?


More importantly, you should consider the primitive actions the robot arm could take: 
Pick(obj_name), PlaceOn(obj_name), PlaceAt(place_pos), Push(obj_name, direction, distance), DrawerOpen(handle_name, target_open_degree), DrawerClose(handle_name, target_open_degree), Press(obj_name, direction, distance),
and then propose feasible tasks.
Here I will show you the implementation of the primitive actions for your reference.
Pick(obj_name): Approach the object, close the gripper to grasp it and lift it up (Parameters: obj_name -- the name of the object which would be picked). 
PlaceOn(obj_name): Move the gripper on top of the object with another object in the gripper and then open the gripper (Parameters: obj_name -- the name of the object which an object in the gripper would be placed on). 
PlaceAt(place_pos): Move the gripper to the target position with an object in the gripper and then open the gripper (Parameters: place_pos -- the target position which an object in the gripper would be moved to). 
Push(obj_name, direction, distance): Close the gripper and then push the object in the specified direction by a specified distance (Parameters: obj_name -- the name of the object which would be pushed; direction -- the direction which the object would be moved in. It is a direction vector [x, y, z]. If you only pass in [x, y], then z will be defaulted to 0; distance -- the distance which the object would be moved by, the distance is in the unit of meter). 
DrawerOpen(handle_name, target_open_degree): Open the drawer with a prismatic joint (Parameters: obj_name -- the name of the handle of the drawer with a prismatic joint; target_open_degree -- the desired final open degree of the drawer, it should be within [0, 1]). 
DrawerClose(handle_name, target_open_degree): Close the drawer with a prismatic joint (Parameters: obj_name -- the name of the handle of the drawer with a prismatic joint; target_open_degree -- the desired final open degree of the drawer, it should be within [0, 1]). 
Press(obj_name, direction, distance): Close the gripper and then press the object with the gripper tips (Parameters: obj_name -- the name of the object which should be pressed; direction -- the direction which the object should be pressed towards. It is a direction vector [x, y, z]. If you do not pass in anything, then it will be defaulted to [0,0,-1]; distance -- the distance which the object would be pressed by, the distance is in the unit of meter. If you do not pass in anything, the it will be defaulted to 0.015).


Scene Description:
{}

Major Task:
{}

Task Decomposition:
{}

Please provide a score (1-5) based on the task decomposition above, considering the scene description, and briefly explain your reasoning.

Please output the evaluation result in the following format:

Score: X/5
Reason:
- Logical Coherence: A brief evaluation of the task decomposition logic.
- Detailing: A brief evaluation of whether the smaller tasks are clear and specific.
- Goal Achievement: A brief evaluation of how the tasks help achieve the major task.
- Consideration of Spatial Relationships: A brief evaluation of whether the task considered object positions and spatial relationships.



Now, please evaluate and provide a score based on the information above.